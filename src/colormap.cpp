#include "QMatPlotWidget.h"

#include <cmath>

/*
 *
 
OCTAVE built-in colormaps:

     Map         Description
     --------------------------------------------------------------------------
     viridis     default
     turbo       colormap traversing blue, cyan, green, yellow, red; modern
                 replacement for jet.
     jet         colormap traversing blue, cyan, green, yellow, red.
     cubehelix   colormap traversing black, blue, green, red, white with
                 increasing intensity.
     hsv         cyclic colormap traversing Hue, Saturation, Value space.
     rainbow     colormap traversing red, yellow, blue, green, violet.
     ---------   --------------------------------------------------------------
     hot         colormap traversing black, red, orange, yellow, white.
     cool        colormap traversing cyan, purple, magenta.
     spring      colormap traversing magenta to yellow.
     summer      colormap traversing green to yellow.
     autumn      colormap traversing red, orange, yellow.
     winter      colormap traversing blue to green.
     ---------   --------------------------------------------------------------
     gray        colormap traversing black to white in shades of gray.
     bone        colormap traversing black, gray-blue, white.
     copper      colormap traversing black to light copper.
     pink        colormap traversing black, gray-pink, white.
     ocean       colormap traversing black, dark-blue, white.
     ---------   --------------------------------------------------------------
     colorcube   equally spaced colors in RGB color space.
     flag        cyclic 4-color map of red, white, blue, black.
     lines       cyclic colormap with colors from axes "ColorOrder"
                 property.
     prism       cyclic 6-color map of red, orange, yellow, green, blue,
                 violet.
     ---------   --------------------------------------------------------------
     white       all white colormap (no colors).

 */

QVector<QRgb> viridis(int n);
QVector<QRgb> turbo(int n);
QVector<QRgb> gray(int n);
QVector<QRgb> jet(int n);

QVector<QRgb> QMatPlotWidget::colorMap(ColorMapType t, int n)
{
    switch (t) {
    case Gray:
        return gray(n);
    case Viridis:
        return viridis(n);
    case Turbo:
        return turbo(n);
    case Jet:
        return jet(n);
    }
    return QVector<QRgb>();
}

static const float _color_order_[] = {0.00000000, 0.44700000, 0.74100000, 0.85000000, 0.32500000,
                                      0.09800000, 0.92900000, 0.69400000, 0.12500000, 0.49400000,
                                      0.18400000, 0.55600000, 0.46600000, 0.67400000, 0.18800000,
                                      0.30100000, 0.74500000, 0.93300000, 0.63500000, 0.07800000,
                                      0.18400000};

QVector<QRgb> QMatPlotWidget::defaultColorOrder()
{
    int n = 7;
    QVector<QRgb> map(n);
    for (int i = 0; i < n; ++i) {
        const float *q = _color_order_ + i * 3;
        map[i] = qRgb(*q * 255, *(q + 1) * 255, *(q + 2) * 255);
    }
    return map;
}

static const float _viridis_[] = {
    0.26700401, 0.00487433, 0.32941519, 0.26851048, 0.00960483, 0.33542652, 0.26994384, 0.01462494,
    0.34137895, 0.27130489, 0.01994186, 0.34726862, 0.27259384, 0.02556309, 0.35309303, 0.27380934,
    0.03149748, 0.35885256, 0.27495242, 0.03775181, 0.36454323, 0.27602238, 0.04416723, 0.37016418,
    0.27701840, 0.05034437, 0.37571452, 0.27794143, 0.05632444, 0.38119074, 0.27879067, 0.06214536,
    0.38659204, 0.27956550, 0.06783587, 0.39191723, 0.28026658, 0.07341724, 0.39716349, 0.28089358,
    0.07890703, 0.40232944, 0.28144581, 0.08431970, 0.40741404, 0.28192358, 0.08966622, 0.41241521,
    0.28232739, 0.09495545, 0.41733086, 0.28265633, 0.10019576, 0.42216032, 0.28291049, 0.10539345,
    0.42690202, 0.28309095, 0.11055307, 0.43155375, 0.28319704, 0.11567966, 0.43611482, 0.28322882,
    0.12077701, 0.44058404, 0.28318684, 0.12584799, 0.44496000, 0.28307200, 0.13089477, 0.44924127,
    0.28288389, 0.13592005, 0.45342734, 0.28262297, 0.14092556, 0.45751726, 0.28229037, 0.14591233,
    0.46150995, 0.28188676, 0.15088147, 0.46540474, 0.28141228, 0.15583425, 0.46920128, 0.28086773,
    0.16077132, 0.47289909, 0.28025468, 0.16569272, 0.47649762, 0.27957399, 0.17059884, 0.47999675,
    0.27882618, 0.17549020, 0.48339654, 0.27801236, 0.18036684, 0.48669702, 0.27713437, 0.18522836,
    0.48989831, 0.27619376, 0.19007447, 0.49300074, 0.27519116, 0.19490540, 0.49600488, 0.27412802,
    0.19972086, 0.49891131, 0.27300596, 0.20452049, 0.50172076, 0.27182812, 0.20930306, 0.50443413,
    0.27059473, 0.21406899, 0.50705243, 0.26930756, 0.21881782, 0.50957678, 0.26796846, 0.22354911,
    0.51200840, 0.26657984, 0.22826210, 0.51434870, 0.26514450, 0.23295593, 0.51659930, 0.26366320,
    0.23763078, 0.51876163, 0.26213801, 0.24228619, 0.52083736, 0.26057103, 0.24692170, 0.52282822,
    0.25896451, 0.25153685, 0.52473609, 0.25732244, 0.25613040, 0.52656332, 0.25564519, 0.26070284,
    0.52831152, 0.25393498, 0.26525384, 0.52998273, 0.25219404, 0.26978306, 0.53157905, 0.25042462,
    0.27429024, 0.53310261, 0.24862899, 0.27877509, 0.53455561, 0.24681140, 0.28323662, 0.53594093,
    0.24497208, 0.28767547, 0.53726018, 0.24311324, 0.29209154, 0.53851561, 0.24123708, 0.29648471,
    0.53970946, 0.23934575, 0.30085494, 0.54084398, 0.23744138, 0.30520222, 0.54192140, 0.23552606,
    0.30952657, 0.54294396, 0.23360277, 0.31382773, 0.54391424, 0.23167350, 0.31810580, 0.54483444,
    0.22973926, 0.32236127, 0.54570633, 0.22780192, 0.32659432, 0.54653200, 0.22586330, 0.33080515,
    0.54731353, 0.22392515, 0.33499400, 0.54805291, 0.22198915, 0.33916114, 0.54875211, 0.22005691,
    0.34330688, 0.54941304, 0.21812995, 0.34743154, 0.55003755, 0.21620971, 0.35153548, 0.55062743,
    0.21429757, 0.35561907, 0.55118440, 0.21239477, 0.35968273, 0.55171011, 0.21050310, 0.36372671,
    0.55220646, 0.20862342, 0.36775151, 0.55267486, 0.20675628, 0.37175775, 0.55311653, 0.20490257,
    0.37574589, 0.55353282, 0.20306309, 0.37971644, 0.55392505, 0.20123854, 0.38366989, 0.55429441,
    0.19942950, 0.38760678, 0.55464205, 0.19763650, 0.39152762, 0.55496905, 0.19585993, 0.39543297,
    0.55527637, 0.19410009, 0.39932336, 0.55556494, 0.19235719, 0.40319934, 0.55583559, 0.19063135,
    0.40706148, 0.55608907, 0.18892259, 0.41091033, 0.55632606, 0.18723083, 0.41474645, 0.55654717,
    0.18555593, 0.41857040, 0.55675292, 0.18389763, 0.42238275, 0.55694377, 0.18225561, 0.42618405,
    0.55712010, 0.18062949, 0.42997486, 0.55728221, 0.17901879, 0.43375572, 0.55743035, 0.17742298,
    0.43752720, 0.55756466, 0.17584148, 0.44128981, 0.55768526, 0.17427363, 0.44504410, 0.55779216,
    0.17271876, 0.44879060, 0.55788532, 0.17117615, 0.45252980, 0.55796464, 0.16964573, 0.45626209,
    0.55803034, 0.16812641, 0.45998802, 0.55808199, 0.16661710, 0.46370813, 0.55811913, 0.16511703,
    0.46742290, 0.55814141, 0.16362543, 0.47113278, 0.55814842, 0.16214155, 0.47483821, 0.55813967,
    0.16066467, 0.47853961, 0.55811466, 0.15919413, 0.48223740, 0.55807280, 0.15772933, 0.48593197,
    0.55801347, 0.15626973, 0.48962370, 0.55793600, 0.15481488, 0.49331293, 0.55783967, 0.15336445,
    0.49700003, 0.55772371, 0.15191820, 0.50068529, 0.55758733, 0.15047605, 0.50436904, 0.55742968,
    0.14903918, 0.50805136, 0.55725050, 0.14760731, 0.51173263, 0.55704861, 0.14618026, 0.51541316,
    0.55682271, 0.14475863, 0.51909319, 0.55657181, 0.14334327, 0.52277292, 0.55629491, 0.14193527,
    0.52645254, 0.55599097, 0.14053599, 0.53013219, 0.55565893, 0.13914708, 0.53381201, 0.55529773,
    0.13777048, 0.53749213, 0.55490625, 0.13640850, 0.54117264, 0.55448339, 0.13506561, 0.54485335,
    0.55402906, 0.13374299, 0.54853458, 0.55354108, 0.13244401, 0.55221637, 0.55301828, 0.13117249,
    0.55589872, 0.55245948, 0.12993270, 0.55958162, 0.55186354, 0.12872938, 0.56326503, 0.55122927,
    0.12756771, 0.56694891, 0.55055551, 0.12645338, 0.57063316, 0.54984110, 0.12539383, 0.57431754,
    0.54908564, 0.12439474, 0.57800205, 0.54828740, 0.12346281, 0.58168661, 0.54744498, 0.12260562,
    0.58537105, 0.54655722, 0.12183122, 0.58905521, 0.54562298, 0.12114807, 0.59273889, 0.54464114,
    0.12056501, 0.59642187, 0.54361058, 0.12009154, 0.60010387, 0.54253043, 0.11973756, 0.60378459,
    0.54139999, 0.11951163, 0.60746388, 0.54021751, 0.11942341, 0.61114146, 0.53898192, 0.11948255,
    0.61481702, 0.53769219, 0.11969858, 0.61849025, 0.53634733, 0.12008079, 0.62216081, 0.53494633,
    0.12063824, 0.62582833, 0.53348834, 0.12137972, 0.62949242, 0.53197275, 0.12231244, 0.63315277,
    0.53039808, 0.12344358, 0.63680899, 0.52876343, 0.12477953, 0.64046069, 0.52706792, 0.12632581,
    0.64410744, 0.52531069, 0.12808703, 0.64774881, 0.52349092, 0.13006688, 0.65138436, 0.52160791,
    0.13226797, 0.65501363, 0.51966086, 0.13469183, 0.65863619, 0.51764880, 0.13733921, 0.66225157,
    0.51557101, 0.14020991, 0.66585927, 0.51342680, 0.14330291, 0.66945881, 0.51121549, 0.14661640,
    0.67304968, 0.50893644, 0.15014782, 0.67663139, 0.50658890, 0.15389405, 0.68020343, 0.50417217,
    0.15785146, 0.68376525, 0.50168574, 0.16201598, 0.68731632, 0.49912906, 0.16638320, 0.69085611,
    0.49650163, 0.17094840, 0.69438405, 0.49380294, 0.17570671, 0.69789960, 0.49103252, 0.18065314,
    0.70140222, 0.48818938, 0.18578266, 0.70489133, 0.48527326, 0.19109018, 0.70836635, 0.48228395,
    0.19657063, 0.71182668, 0.47922108, 0.20221902, 0.71527175, 0.47608431, 0.20803045, 0.71870095,
    0.47287330, 0.21400015, 0.72211371, 0.46958774, 0.22012381, 0.72550945, 0.46622638, 0.22639690,
    0.72888753, 0.46278934, 0.23281498, 0.73224735, 0.45927675, 0.23937390, 0.73558828, 0.45568838,
    0.24606968, 0.73890972, 0.45202405, 0.25289851, 0.74221104, 0.44828355, 0.25985676, 0.74549162,
    0.44446673, 0.26694127, 0.74875084, 0.44057284, 0.27414922, 0.75198807, 0.43660090, 0.28147681,
    0.75520266, 0.43255207, 0.28892102, 0.75839399, 0.42842626, 0.29647899, 0.76156142, 0.42422341,
    0.30414796, 0.76470433, 0.41994346, 0.31192534, 0.76782207, 0.41558638, 0.31980860, 0.77091403,
    0.41115215, 0.32779580, 0.77397953, 0.40664011, 0.33588539, 0.77701790, 0.40204917, 0.34407411,
    0.78002855, 0.39738103, 0.35235985, 0.78301086, 0.39263579, 0.36074053, 0.78596419, 0.38781353,
    0.36921420, 0.78888793, 0.38291438, 0.37777892, 0.79178146, 0.37793850, 0.38643282, 0.79464415,
    0.37288606, 0.39517408, 0.79747541, 0.36775726, 0.40400101, 0.80027461, 0.36255223, 0.41291350,
    0.80304099, 0.35726893, 0.42190813, 0.80577412, 0.35191009, 0.43098317, 0.80847343, 0.34647607,
    0.44013691, 0.81113836, 0.34096730, 0.44936763, 0.81376835, 0.33538426, 0.45867362, 0.81636288,
    0.32972749, 0.46805314, 0.81892143, 0.32399761, 0.47750446, 0.82144351, 0.31819529, 0.48702580,
    0.82392862, 0.31232133, 0.49661536, 0.82637633, 0.30637661, 0.50627130, 0.82878621, 0.30036211,
    0.51599182, 0.83115784, 0.29427888, 0.52577622, 0.83349064, 0.28812650, 0.53562110, 0.83578452,
    0.28190832, 0.54552440, 0.83803918, 0.27562602, 0.55548397, 0.84025437, 0.26928147, 0.56549760,
    0.84242990, 0.26287683, 0.57556297, 0.84456561, 0.25641457, 0.58567772, 0.84666139, 0.24989748,
    0.59583934, 0.84871722, 0.24332878, 0.60604528, 0.85073310, 0.23671214, 0.61629283, 0.85270912,
    0.23005179, 0.62657923, 0.85464543, 0.22335258, 0.63690157, 0.85654226, 0.21662012, 0.64725685,
    0.85839991, 0.20986086, 0.65764197, 0.86021878, 0.20308229, 0.66805369, 0.86199932, 0.19629307,
    0.67848868, 0.86374211, 0.18950326, 0.68894351, 0.86544779, 0.18272455, 0.69941463, 0.86711711,
    0.17597055, 0.70989842, 0.86875092, 0.16925712, 0.72039115, 0.87035015, 0.16260273, 0.73088902,
    0.87191584, 0.15602894, 0.74138803, 0.87344918, 0.14956101, 0.75188414, 0.87495143, 0.14322828,
    0.76237342, 0.87642392, 0.13706449, 0.77285183, 0.87786808, 0.13110864, 0.78331535, 0.87928545,
    0.12540538, 0.79375994, 0.88067763, 0.12000532, 0.80418159, 0.88204632, 0.11496505, 0.81457634,
    0.88339329, 0.11034678, 0.82494028, 0.88472036, 0.10621724, 0.83526959, 0.88602943, 0.10264590,
    0.84556056, 0.88732243, 0.09970219, 0.85580960, 0.88860134, 0.09745186, 0.86601325, 0.88986815,
    0.09595277, 0.87616824, 0.89112487, 0.09525046, 0.88627146, 0.89237353, 0.09537439, 0.89632002,
    0.89361614, 0.09633538, 0.90631121, 0.89485467, 0.09812496, 0.91624212, 0.89609127, 0.10071680,
    0.92610579, 0.89732977, 0.10407067, 0.93590444, 0.89857040, 0.10813094, 0.94563626, 0.89981500,
    0.11283773, 0.95529972, 0.90106534, 0.11812832, 0.96489353, 0.90232311, 0.12394051, 0.97441665,
    0.90358991, 0.13021494, 0.98386829, 0.90486726, 0.13689671, 0.99324789, 0.90615657, 0.14393620};

QVector<QRgb> viridis(int n)
{
    QVector<QRgb> map(n);
    for (int i = 0; i < n; ++i) {
        float v = 1.0f * i / n;
        int p = std::floor(v * 256);
        const float *q = _viridis_ + p * 3;
        map[i] = qRgb(*q * 255, *(q + 1) * 255, *(q + 2) * 255);
    }
    return map;
}

QVector<QRgb> gray(int n)
{
    QVector<QRgb> map(n);
    for (int i = 0; i < n; ++i) {
        float v = 1.0f * i / n;
        int p = std::floor(v * 256);
        map[i] = qRgb(p, p, p);
    }
    return map;
}

QVector<QRgb> jet(int n)
{
    if (n == 1)
        return {qRgb(0, 255, 255)};
    else if (n == 2)
        return {qRgb(0, 0, 255), qRgb(0, 255, 255)};
    else if (n > 2) {
        int nel = std::ceil(1.0 * n / 4);
        int idx1 = std::ceil(3.0 / 8 * n) + 1;
        if (n % 8 == 2)
            idx1++;

        int idx2 = idx1 + nel - 1;          // ~5/8*n for large n
        int idx3 = std::min(idx2 + nel, n); // ~7/8*n for large n

        QVector<float> r(n + 1, 0.0f);

        int k = 1;
        for (int i = idx1; i <= idx2; ++i)
            r[i] = 1.0 * k++ / nel;
        for (int i = idx2; i <= idx3; ++i)
            r[i] = 1.0;

        int nel2 = n - idx3;
        k = nel;
        for (int i = idx3; i <= idx3 + nel2; ++i)
            r[i] = 1.0 * k-- / nel;

        idx1 = idx1 - nel;              //~1 / 8 * n for large n
        idx2 = idx1 + nel - 1;          //~3 / 8 * n for large n
        idx3 = std::min(idx2 + nel, n); //~5 / 8 * n for large n

        QVector<float> g(n + 1, 0.0f);
        k = 1;
        for (int i = idx1; i <= idx2; ++i)
            g[i] = 1.0 * k++ / nel;
        for (int i = idx2; i <= idx3; ++i)
            g[i] = 1.0;
        nel2 = std::min(nel, n - idx3);
        k = nel;
        for (int i = idx3; i <= idx3 + nel2; ++i)
            g[i] = 1.0 * k-- / nel;

        idx1 = std::max(idx2 - nel, 1); //#~1 / 8 * n for large n
        idx2 = idx2;                    //#~3 / 8 * n for large n
        idx3 = idx3;                    // #~5 / 8 * n for large n

        QVector<float> b(n + 1, 0.0f);
        nel2 = std::min(nel, idx1 - 1);
        k = nel - nel2;
        for (int i = 1; i <= idx1; ++i)
            b[i] = 1.0 * k++ / nel;
        for (int i = idx1; i <= idx2; ++i)
            b[i] = 1.0;
        nel2 = std::min(nel, n - idx3);
        k = nel;
        for (int i = idx2; i <= idx2 + nel2; ++i)
            b[i] = 1.0 * k-- / nel;

        QVector<QRgb> map(n);
        for (int i = 0; i < n; ++i) {
            map[i] = {qRgb(r[i + 1] * 255, g[i + 1] * 255, b[i + 1] * 255)};
        }

        return map;

    } else {
        return QVector<QRgb>();
    }
}

static const float _turbo_[] = {
    0.18995000, 0.07176000, 0.23217000, 0.19483000, 0.08339000, 0.26149000, 0.19956000, 0.09498000,
    0.29024000, 0.20415000, 0.10652000, 0.31844000, 0.20860000, 0.11802000, 0.34607000, 0.21291000,
    0.12947000, 0.37314000, 0.21708000, 0.14087000, 0.39964000, 0.22111000, 0.15223000, 0.42558000,
    0.22500000, 0.16354000, 0.45096000, 0.22875000, 0.17481000, 0.47578000, 0.23236000, 0.18603000,
    0.50004000, 0.23582000, 0.19720000, 0.52373000, 0.23915000, 0.20833000, 0.54686000, 0.24234000,
    0.21941000, 0.56942000, 0.24539000, 0.23044000, 0.59142000, 0.24830000, 0.24143000, 0.61286000,
    0.25107000, 0.25237000, 0.63374000, 0.25369000, 0.26327000, 0.65406000, 0.25618000, 0.27412000,
    0.67381000, 0.25853000, 0.28492000, 0.69300000, 0.26074000, 0.29568000, 0.71162000, 0.26280000,
    0.30639000, 0.72968000, 0.26473000, 0.31706000, 0.74718000, 0.26652000, 0.32768000, 0.76412000,
    0.26816000, 0.33825000, 0.78050000, 0.26967000, 0.34878000, 0.79631000, 0.27103000, 0.35926000,
    0.81156000, 0.27226000, 0.36970000, 0.82624000, 0.27334000, 0.38008000, 0.84037000, 0.27429000,
    0.39043000, 0.85393000, 0.27509000, 0.40072000, 0.86692000, 0.27576000, 0.41097000, 0.87936000,
    0.27628000, 0.42118000, 0.89123000, 0.27667000, 0.43134000, 0.90254000, 0.27691000, 0.44145000,
    0.91328000, 0.27701000, 0.45152000, 0.92347000, 0.27698000, 0.46153000, 0.93309000, 0.27680000,
    0.47151000, 0.94214000, 0.27648000, 0.48144000, 0.95064000, 0.27603000, 0.49132000, 0.95857000,
    0.27543000, 0.50115000, 0.96594000, 0.27469000, 0.51094000, 0.97275000, 0.27381000, 0.52069000,
    0.97899000, 0.27273000, 0.53040000, 0.98461000, 0.27106000, 0.54015000, 0.98930000, 0.26878000,
    0.54995000, 0.99303000, 0.26592000, 0.55979000, 0.99583000, 0.26252000, 0.56967000, 0.99773000,
    0.25862000, 0.57958000, 0.99876000, 0.25425000, 0.58950000, 0.99896000, 0.24946000, 0.59943000,
    0.99835000, 0.24427000, 0.60937000, 0.99697000, 0.23874000, 0.61931000, 0.99485000, 0.23288000,
    0.62923000, 0.99202000, 0.22676000, 0.63913000, 0.98851000, 0.22039000, 0.64901000, 0.98436000,
    0.21382000, 0.65886000, 0.97959000, 0.20708000, 0.66866000, 0.97423000, 0.20021000, 0.67842000,
    0.96833000, 0.19326000, 0.68812000, 0.96190000, 0.18625000, 0.69775000, 0.95498000, 0.17923000,
    0.70732000, 0.94761000, 0.17223000, 0.71680000, 0.93981000, 0.16529000, 0.72620000, 0.93161000,
    0.15844000, 0.73551000, 0.92305000, 0.15173000, 0.74472000, 0.91416000, 0.14519000, 0.75381000,
    0.90496000, 0.13886000, 0.76279000, 0.89550000, 0.13278000, 0.77165000, 0.88580000, 0.12698000,
    0.78037000, 0.87590000, 0.12151000, 0.78896000, 0.86581000, 0.11639000, 0.79740000, 0.85559000,
    0.11167000, 0.80569000, 0.84525000, 0.10738000, 0.81381000, 0.83484000, 0.10357000, 0.82177000,
    0.82437000, 0.10026000, 0.82955000, 0.81389000, 0.09750000, 0.83714000, 0.80342000, 0.09532000,
    0.84455000, 0.79299000, 0.09377000, 0.85175000, 0.78264000, 0.09287000, 0.85875000, 0.77240000,
    0.09267000, 0.86554000, 0.76230000, 0.09320000, 0.87211000, 0.75237000, 0.09451000, 0.87844000,
    0.74265000, 0.09662000, 0.88454000, 0.73316000, 0.09958000, 0.89040000, 0.72393000, 0.10342000,
    0.89600000, 0.71500000, 0.10815000, 0.90142000, 0.70599000, 0.11374000, 0.90673000, 0.69651000,
    0.12014000, 0.91193000, 0.68660000, 0.12733000, 0.91701000, 0.67627000, 0.13526000, 0.92197000,
    0.66556000, 0.14391000, 0.92680000, 0.65448000, 0.15323000, 0.93151000, 0.64308000, 0.16319000,
    0.93609000, 0.63137000, 0.17377000, 0.94053000, 0.61938000, 0.18491000, 0.94484000, 0.60713000,
    0.19659000, 0.94901000, 0.59466000, 0.20877000, 0.95304000, 0.58199000, 0.22142000, 0.95692000,
    0.56914000, 0.23449000, 0.96065000, 0.55614000, 0.24797000, 0.96423000, 0.54303000, 0.26180000,
    0.96765000, 0.52981000, 0.27597000, 0.97092000, 0.51653000, 0.29042000, 0.97403000, 0.50321000,
    0.30513000, 0.97697000, 0.48987000, 0.32006000, 0.97974000, 0.47654000, 0.33517000, 0.98234000,
    0.46325000, 0.35043000, 0.98477000, 0.45002000, 0.36581000, 0.98702000, 0.43688000, 0.38127000,
    0.98909000, 0.42386000, 0.39678000, 0.99098000, 0.41098000, 0.41229000, 0.99268000, 0.39826000,
    0.42778000, 0.99419000, 0.38575000, 0.44321000, 0.99551000, 0.37345000, 0.45854000, 0.99663000,
    0.36140000, 0.47375000, 0.99755000, 0.34963000, 0.48879000, 0.99828000, 0.33816000, 0.50362000,
    0.99879000, 0.32701000, 0.51822000, 0.99910000, 0.31622000, 0.53255000, 0.99919000, 0.30581000,
    0.54658000, 0.99907000, 0.29581000, 0.56026000, 0.99873000, 0.28623000, 0.57357000, 0.99817000,
    0.27712000, 0.58646000, 0.99739000, 0.26849000, 0.59891000, 0.99638000, 0.26038000, 0.61088000,
    0.99514000, 0.25280000, 0.62233000, 0.99366000, 0.24579000, 0.63323000, 0.99195000, 0.23937000,
    0.64362000, 0.98999000, 0.23356000, 0.65394000, 0.98775000, 0.22835000, 0.66428000, 0.98524000,
    0.22370000, 0.67462000, 0.98246000, 0.21960000, 0.68494000, 0.97941000, 0.21602000, 0.69525000,
    0.97610000, 0.21294000, 0.70553000, 0.97255000, 0.21032000, 0.71577000, 0.96875000, 0.20815000,
    0.72596000, 0.96470000, 0.20640000, 0.73610000, 0.96043000, 0.20504000, 0.74617000, 0.95593000,
    0.20406000, 0.75617000, 0.95121000, 0.20343000, 0.76608000, 0.94627000, 0.20311000, 0.77591000,
    0.94113000, 0.20310000, 0.78563000, 0.93579000, 0.20336000, 0.79524000, 0.93025000, 0.20386000,
    0.80473000, 0.92452000, 0.20459000, 0.81410000, 0.91861000, 0.20552000, 0.82333000, 0.91253000,
    0.20663000, 0.83241000, 0.90627000, 0.20788000, 0.84133000, 0.89986000, 0.20926000, 0.85010000,
    0.89328000, 0.21074000, 0.85868000, 0.88655000, 0.21230000, 0.86709000, 0.87968000, 0.21391000,
    0.87530000, 0.87267000, 0.21555000, 0.88331000, 0.86553000, 0.21719000, 0.89112000, 0.85826000,
    0.21880000, 0.89870000, 0.85087000, 0.22038000, 0.90605000, 0.84337000, 0.22188000, 0.91317000,
    0.83576000, 0.22328000, 0.92004000, 0.82806000, 0.22456000, 0.92666000, 0.82025000, 0.22570000,
    0.93301000, 0.81236000, 0.22667000, 0.93909000, 0.80439000, 0.22744000, 0.94489000, 0.79634000,
    0.22800000, 0.95039000, 0.78823000, 0.22831000, 0.95560000, 0.78005000, 0.22836000, 0.96049000,
    0.77181000, 0.22811000, 0.96507000, 0.76352000, 0.22754000, 0.96931000, 0.75519000, 0.22663000,
    0.97323000, 0.74682000, 0.22536000, 0.97679000, 0.73842000, 0.22369000, 0.98000000, 0.73000000,
    0.22161000, 0.98289000, 0.72140000, 0.21918000, 0.98549000, 0.71250000, 0.21650000, 0.98781000,
    0.70330000, 0.21358000, 0.98986000, 0.69382000, 0.21043000, 0.99163000, 0.68408000, 0.20706000,
    0.99314000, 0.67408000, 0.20348000, 0.99438000, 0.66386000, 0.19971000, 0.99535000, 0.65341000,
    0.19577000, 0.99607000, 0.64277000, 0.19165000, 0.99654000, 0.63193000, 0.18738000, 0.99675000,
    0.62093000, 0.18297000, 0.99672000, 0.60977000, 0.17842000, 0.99644000, 0.59846000, 0.17376000,
    0.99593000, 0.58703000, 0.16899000, 0.99517000, 0.57549000, 0.16412000, 0.99419000, 0.56386000,
    0.15918000, 0.99297000, 0.55214000, 0.15417000, 0.99153000, 0.54036000, 0.14910000, 0.98987000,
    0.52854000, 0.14398000, 0.98799000, 0.51667000, 0.13883000, 0.98590000, 0.50479000, 0.13367000,
    0.98360000, 0.49291000, 0.12849000, 0.98108000, 0.48104000, 0.12332000, 0.97837000, 0.46920000,
    0.11817000, 0.97545000, 0.45740000, 0.11305000, 0.97234000, 0.44565000, 0.10797000, 0.96904000,
    0.43399000, 0.10294000, 0.96555000, 0.42241000, 0.09798000, 0.96187000, 0.41093000, 0.09310000,
    0.95801000, 0.39958000, 0.08831000, 0.95398000, 0.38836000, 0.08362000, 0.94977000, 0.37729000,
    0.07905000, 0.94538000, 0.36638000, 0.07461000, 0.94084000, 0.35566000, 0.07031000, 0.93612000,
    0.34513000, 0.06616000, 0.93125000, 0.33482000, 0.06218000, 0.92623000, 0.32473000, 0.05837000,
    0.92105000, 0.31489000, 0.05475000, 0.91572000, 0.30530000, 0.05134000, 0.91024000, 0.29599000,
    0.04814000, 0.90463000, 0.28696000, 0.04516000, 0.89888000, 0.27824000, 0.04243000, 0.89298000,
    0.26981000, 0.03993000, 0.88691000, 0.26152000, 0.03753000, 0.88066000, 0.25334000, 0.03521000,
    0.87422000, 0.24526000, 0.03297000, 0.86760000, 0.23730000, 0.03082000, 0.86079000, 0.22945000,
    0.02875000, 0.85380000, 0.22170000, 0.02677000, 0.84662000, 0.21407000, 0.02487000, 0.83926000,
    0.20654000, 0.02305000, 0.83172000, 0.19912000, 0.02131000, 0.82399000, 0.19182000, 0.01966000,
    0.81608000, 0.18462000, 0.01809000, 0.80799000, 0.17753000, 0.01660000, 0.79971000, 0.17055000,
    0.01520000, 0.79125000, 0.16368000, 0.01387000, 0.78260000, 0.15693000, 0.01264000, 0.77377000,
    0.15028000, 0.01148000, 0.76476000, 0.14374000, 0.01041000, 0.75556000, 0.13731000, 0.00942000,
    0.74617000, 0.13098000, 0.00851000, 0.73661000, 0.12477000, 0.00769000, 0.72686000, 0.11867000,
    0.00695000, 0.71692000, 0.11268000, 0.00629000, 0.70680000, 0.10680000, 0.00571000, 0.69650000,
    0.10102000, 0.00522000, 0.68602000, 0.09536000, 0.00481000, 0.67535000, 0.08980000, 0.00449000,
    0.66449000, 0.08436000, 0.00424000, 0.65345000, 0.07902000, 0.00408000, 0.64223000, 0.07380000,
    0.00401000, 0.63082000, 0.06868000, 0.00401000, 0.61923000, 0.06367000, 0.00410000, 0.60746000,
    0.05878000, 0.00427000, 0.59550000, 0.05399000, 0.00453000, 0.58336000, 0.04931000, 0.00486000,
    0.57103000, 0.04474000, 0.00529000, 0.55852000, 0.04028000, 0.00579000, 0.54583000, 0.03593000,
    0.00638000, 0.53295000, 0.03169000, 0.00705000, 0.51989000, 0.02756000, 0.00780000, 0.50664000,
    0.02354000, 0.00863000, 0.49321000, 0.01963000, 0.00955000, 0.47960000, 0.01583000, 0.01055000};

QVector<QRgb> turbo(int n)
{
    QVector<QRgb> map(n);
    for (int i = 0; i < n; ++i) {
        float v = 1.0f * i / n;
        int p = std::floor(v * 256);
        const float *q = _turbo_ + p * 3;
        map[i] = qRgb(*q * 255, *(q + 1) * 255, *(q + 2) * 255);
    }
    return map;
}
